Product Requirements Document (PRD): Social Media Engagement Marketplace
1. Overview
1.1 Product Name
Social Media Engagement Marketplace
1.2 Purpose
The Social Media Engagement Marketplace is a web-based platform that connects users seeking to enhance their social media presence (buyers) with individuals willing to provide genuine engagement actions (providers). Supported actions include Followers, Subscribers, Views, Likes, Reposts, Shares, and Comments, each priced at 5 shillings per action for buyers, with providers earning 2 shillings per action. The platform generates revenue by charging a 2.9% + 30 shillings transaction fee on provider withdrawals. Built with React (Vite), Tailwind CSS, shadcn/ui, Supabase, Paystack, and Resend, the platform ensures secure transactions, verified actions, and seamless user experiences.
1.3 Objectives

Enable buyers to purchase authentic social media actions (Followers, Subscribers, Views, Likes, Reposts, Shares, Comments).
Allow providers to earn money by performing these actions.
Provide a secure, user-friendly platform with robust authentication, payment processing, and email notifications.
Ensure transparency and trust through action verification and clear pricing.
Monetize via withdrawal fees while maintaining a sustainable business model.

1.4 Target Audience

Buyers: Individuals, influencers, or businesses aiming to boost engagement on platforms like Instagram, YouTube, Twitter, TikTok, etc.
Providers: Users willing to perform engagement actions (follow, subscribe, view, like, repost, share, comment) for payment.
Geographic Focus: Regions where Paystack operates (e.g., Nigeria, Kenya, Ghana), using shillings as the currency.

2. Features
2.1 User Authentication

Sign-Up: Users create accounts with email and password via Supabase Auth.
Login/Logout: Secure login with email/password; logout clears session.
Role Selection: Users choose a role (buyer or provider) during sign-up, determining dashboard access.
Profile Management: Update name, email, and linked social media accounts for action verification.

2.2 Buyer Dashboard

Service Browsing: Display available services (Followers, Subscribers, Views, Likes, Reposts, Shares, Comments) with details (platform, price: 5 shillings/unit, provider).
Cart System: Add services with specified quantities to a cart; for Comments, allow buyers to specify desired comment text (subject to moderation).
Checkout: Process payments via Paystack, displaying total cost (5 shillings × quantity).
Purchase History: View past purchases with details (service type, platform, quantity, total cost, comment text if applicable, date).

2.3 Provider Dashboard

Service Listing: Providers list services they offer (e.g., follow, like, or comment on Instagram) with fixed earnings of 2 shillings per action.
Earnings Tracking: Display total earnings and pending actions (e.g., “Like this post” or “Comment on this video”).
Withdrawal System: Request withdrawals with a 2.9% + 30 shillings fee; minimum withdrawal threshold (e.g., 100 shillings).
Action Verification: Providers confirm completed actions via API or manual proof (e.g., screenshots for likes, comments).

2.4 Payment Processing

Buyer Payments: Buyers pay 5 shillings per action (Followers, Subscribers, Views, Likes, Reposts, Shares, Comments) via Paystack.
Provider Withdrawals: Providers withdraw earnings, with a 2.9% + 30 shillings fee deducted.
Currency: Transactions use shillings (KES or equivalent, per Paystack’s support).
Payment Confirmation: Real-time status updates via Paystack webhooks.

2.5 Email Notifications

Transactional Emails (via Resend):
Welcome email on sign-up.
Purchase confirmation for buyers (detailing services, total cost, comment text if applicable).
Withdrawal confirmation for providers (detailing amount, fee, net amount).
Action assignment notifications for providers (e.g., “Like this post” or “Comment with this text”).


Marketing Emails (via Resend):
Promotional campaigns (e.g., discounts for buyers, incentives for providers).
Engagement emails to re-engage inactive users.



2.6 Social Media Action Verification

API Integration: Use social media APIs (e.g., Instagram Graph API, YouTube Data API, Twitter API, TikTok API) to verify actions:
Followers/Subscribers: Check if provider’s account is in the target’s follower/subscriber list.
Views: Confirm view count increase.
Likes: Verify like on specified post/video.
Reposts/Shares: Confirm repost/share on platform.
Comments: Verify comment text and posting.


Manual Verification: Fallback for providers to submit proof (e.g., screenshots of likes, comments) if API access is limited.
Fraud Prevention: Detect bots, rapid follows/unfollows, or inappropriate comments.

2.7 Admin Dashboard

User Management: View, suspend, or delete user accounts.
Transaction Oversight: Monitor purchases and withdrawals, including fees.
Service Moderation: Approve/reject provider service listings; review comment text for appropriateness.
Analytics: Track metrics (e.g., total transactions, active users, revenue from fees, action completion rates).

3. Functional Requirements
3.1 Frontend

Framework: React with Vite for fast development and hot module replacement.
Styling: Tailwind CSS for responsive, utility-first styling.
UI Components: shadcn/ui for accessible components (Button, Input, Card, Modal, Textarea for comment input).
Pages:
Home: Public landing page with sign-up/login and platform overview.
Login/Sign-Up: Forms for Supabase Auth.
Buyer Dashboard: Browse services, cart, checkout, purchase history.
Provider Dashboard: List services, track earnings, withdraw funds.
Profile: Update settings and link social media accounts.


State Management: React hooks (useState, useEffect); consider Redux for complex state if needed.
Comment Input: Buyers specify comment text during purchase, with character limits (e.g., 280 characters) and moderation for inappropriate content.

3.2 Backend (Supabase)

Database Schema:
Users: id, email, name, role (buyer/provider), balance, social_media_accounts, created_at.
Services: id, provider_id, type (follower/subscriber/view/like/repost/share/comment), platform, price (5 shillings), status (active/pending).
Transactions: id, buyer_id, provider_id, service_id, quantity, total_cost, provider_earnings, comment_text (nullable), status, created_at.
Withdrawals: id, provider_id, amount, fee, net_amount, status, created_at.


Storage: Store verification proof (e.g., screenshots for likes, comments) in Supabase Storage.
Authentication: Supabase Auth for email/password-based user management.

3.3 Payment Integration (Paystack)

Buyer Payments:
Initiate payments via Paystack’s JS SDK for 5 shillings per action.
Webhook to confirm payment status and update transaction records.


Provider Withdrawals:
Calculate fee: fee = amount * 0.029 + 30.
Transfer net_amount = amount - fee to provider’s bank account.
Minimum withdrawal threshold (e.g., 100 shillings).


Error Handling: Handle payment failures, insufficient funds, and network issues.

3.4 Email Integration (Resend)

Transactional Emails:
Templates for welcome, purchase, withdrawal, and action assignment emails (including comment text instructions).
Trigger on events (e.g., payment success, withdrawal request).


Marketing Emails:
Schedule campaigns (e.g., weekly promotions) via Resend’s API.
Track open/click rates for analytics.


Error Handling: Retry failed deliveries; log errors.

3.5 Social Media Integration

APIs: Integrate Instagram Graph API, YouTube Data API, Twitter API, TikTok API for verification.
Verification Process:
Followers/Subscribers: Check provider’s account in target’s list.
Views: Confirm view count increase.
Likes: Verify like on specified content.
Reposts/Shares: Confirm repost/share on platform.
Comments: Verify comment text and posting.


Fallback: Manual verification via screenshot uploads, reviewed by admins.
Comment Moderation: Filter inappropriate comments (e.g., profanity, spam) before assignment.

4. Non-Functional Requirements
4.1 Performance

Load Time: Frontend pages load in <2 seconds under normal conditions.
Scalability: Supabase handles up to 10,000 concurrent users initially.
API Response: Payment and email APIs respond in <500ms.

4.2 Security

Authentication: Secure JWT-based authentication via Supabase.
Data Protection: Encrypt sensitive data (e.g., payment details, comment text) in transit and at rest.
Fraud Prevention: Rate limits, bot detection, and action verification to prevent abuse.
Compliance: Adhere to GDPR, CCPA, and platform-specific policies (e.g., Instagram, YouTube).

4.3 Usability

Responsive Design: Support mobile, tablet, and desktop with Tailwind CSS.
Accessibility: Follow WCAG 2.1 (e.g., ARIA labels in shadcn/ui components).
Intuitive UI: Clear navigation, tooltips, and error messages; comment input with character count feedback.

4.4 Reliability

Uptime: 99.9% for Supabase and Paystack integrations.
Error Handling: Graceful handling of API failures with user-friendly messages.
Data Backup: Daily backups of Supabase database and storage.

5. Integrations
5.1 Supabase

Purpose: Authentication, database, and storage.
Implementation:
Use @supabase/supabase-js for client-side interactions.
Tables: users, services, transactions, withdrawals.
Storage: Verification screenshots (e.g., likes, comments).


Environment Variables: VITE_SUPABASE_URL, VITE_SUPABASE_KEY.

5.2 Paystack

Purpose: Buyer payments and provider withdrawals.
Implementation:
Use @paystack/paystack-js for client-side payments.
Webhooks for payment/withdrawal confirmations.
Withdrawal fee: fee = amount * 0.029 + 30.


Environment Variables: VITE_PAYSTACK_PUBLIC_KEY, VITE_PAYSTACK_SECRET_KEY.

5.3 Resend

Purpose: Transactional and marketing emails.
Implementation:
Use Resend’s Node.js SDK for email triggers.
Templates for welcome, purchase, withdrawal, and action emails (including comment instructions).
Schedule marketing campaigns.


Environment Variables: VITE_RESEND_API_KEY.

5.4 Social Media APIs

Purpose: Verify actions (Followers, Subscribers, Views, Likes, Reposts, Shares, Comments).
Implementation:
APIs: Instagram Graph, YouTube Data, Twitter, TikTok.
OAuth for user account linking.
Fallback: Manual screenshot uploads for verification.


Comment Moderation: Automated filters for inappropriate content; admin review for flagged comments.

6. User Flow
6.1 Buyer Flow

Sign up/login via Supabase Auth.
Browse services (Followers, Subscribers, Views, Likes, Reposts, Shares, Comments).
Add services to cart, specifying quantity and comment text (if applicable).
Checkout, paying 5 shillings per unit via Paystack.
Receive purchase confirmation email via Resend.
View purchase history.

6.2 Provider Flow

Sign up/login and select provider role.
List services (e.g., like on Instagram, comment on YouTube).
Receive action assignments via email (e.g., “Comment with this text”).
Perform actions and submit proof (API or screenshots).
Track earnings (2 shillings per action).
Request withdrawal, with 2.9% + 30 shillings fee.
Receive withdrawal confirmation email.

6.3 Admin Flow

Login to Admin Dashboard (restricted).
Approve/reject service listings and review comments.
Monitor transactions and withdrawals.
Handle disputes and verify actions.

7. Success Metrics

User Acquisition: Number of active buyers and providers.
Transaction Volume: Total actions purchased/completed.
Revenue: Withdrawal fees collected (2.9% + 30 shillings).
User Retention: Monthly returning users.
Action Completion Rate: Percentage of assigned actions completed.
Email Engagement: Open/click rates for emails.

8. Constraints and Assumptions

Constraints:
Paystack limited to supported regions.
Social media APIs may have rate limits or restrictions.
Shilling-based transactions assume Paystack support.


Assumptions:
3-shilling difference (5 shillings paid - 2 shillings earned) covers costs or serveshells


Assumptions:
Providers have access to supported platforms.
Users are familiar with digital payments.



9. Risks and Mitigation

Risk: Providers using bots or fake accounts.
Mitigation: API and manual verification; bot detection.


Risk: Inappropriate comments.
Mitigation: Automated filters and admin review.


Risk: Payment failures or disputes.
Mitigation: Paystack webhooks; dispute resolution.


Risk: Low provider engagement.
Mitigation: Marketing emails via Resend.



10. Future Enhancements

Multi-Currency Support: Expand beyond shillings.
Ratings and Reviews: Build trust through user feedback.
Mobile App: React Native for iOS/Android.
Advanced Analytics: Engagement metrics for buyers; revenue trends for admins.
Referral Program: Reward user invitations.

11. Development Setup

Frontend:
Initialize: npm create vite@latest -- --template react.
Install: npm install tailwindcss @tailwindcss/vite @supabase/supabase-js @paystack/paystack-js resend @shadcn/ui.
Tailwind: Configure tailwind.config.js and index.css.
shadcn/ui: Run npx shadcn-ui@latest init and add Button, Input, Card, Textarea.


Environment Variables:
.env: VITE_SUPABASE_URL, VITE_SUPABASE_KEY, VITE_PAYSTACK_PUBLIC_KEY, VITE_PAYSTACK_SECRET_KEY, VITE_RESEND_API_KEY.


Backend:
Supabase: Create tables (users, services, transactions, withdrawals), configure Storage.
Paystack: Obtain API keys, set up webhooks.
Resend: Create email templates, obtain API key.


